{"ast":null,"code":"(function () {\n  'use strict';\n\n  var collator;\n\n  try {\n    collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", {\n      sensitivity: \"base\"\n    }) : null;\n  } catch (err) {\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n\n  var levenshtein = require('fastest-levenshtein'); // arrays to re-use\n\n\n  var prevRow = [],\n      str2Char = [];\n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function (str1, str2, options) {\n      var useCollator = options && collator && options.useCollator;\n\n      if (useCollator) {\n        var str1Len = str1.length,\n            str2Len = str2.length; // base cases\n\n        if (str1Len === 0) return str2Len;\n        if (str2Len === 0) return str1Len; // two rows\n\n        var curCol, nextCol, i, j, tmp; // initialise previous row\n\n        for (i = 0; i < str2Len; ++i) {\n          prevRow[i] = i;\n          str2Char[i] = str2.charCodeAt(i);\n        }\n\n        prevRow[str2Len] = str2Len;\n        var strCmp; // calculate current row distance from previous row using collator\n\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol; // substution\n\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n            nextCol = prevRow[j] + (strCmp ? 0 : 1); // insertion\n\n            tmp = curCol + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            } // deletion\n\n\n            tmp = prevRow[j + 1] + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            } // copy current col value into previous (in preparation for next iteration)\n\n\n            prevRow[j] = curCol;\n          } // copy last col value into previous (in preparation for next iteration)\n\n\n          prevRow[j] = nextCol;\n        }\n\n        return nextCol;\n      }\n\n      return levenshtein.distance(str1, str2);\n    }\n  }; // amd\n\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  } // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n      module.exports = Levenshtein;\n    } // web worker\n    else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n        self.Levenshtein = Levenshtein;\n      } // browser main thread\n      else if (typeof window !== \"undefined\" && window !== null) {\n          window.Levenshtein = Levenshtein;\n        }\n})();","map":{"version":3,"sources":["D:/FantaShop/React/node_modules/fast-levenshtein/levenshtein.js"],"names":["collator","Intl","Collator","sensitivity","err","console","log","levenshtein","require","prevRow","str2Char","Levenshtein","get","str1","str2","options","useCollator","str1Len","length","str2Len","curCol","nextCol","i","j","tmp","charCodeAt","strCmp","compare","charAt","String","fromCharCode","distance","define","amd","module","exports","self","postMessage","importScripts","window"],"mappings":"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","sourcesContent":["(function() {\n  'use strict';\n  \n  var collator;\n  try {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err){\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n\n  var levenshtein = require('fastest-levenshtein');\n\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n  \n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function(str1, str2, options) {\n      var useCollator = (options && collator && options.useCollator);\n      \n      if (useCollator) {\n        var str1Len = str1.length,\n          str2Len = str2.length;\n        \n        // base cases\n        if (str1Len === 0) return str2Len;\n        if (str2Len === 0) return str1Len;\n\n        // two rows\n        var curCol, nextCol, i, j, tmp;\n\n        // initialise previous row\n        for (i=0; i<str2Len; ++i) {\n          prevRow[i] = i;\n          str2Char[i] = str2.charCodeAt(i);\n        }\n        prevRow[str2Len] = str2Len;\n\n        var strCmp;\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n        return nextCol;\n      }\n      return levenshtein.distance(str1, str2);\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function() {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n}());\n"]},"metadata":{},"sourceType":"script"}